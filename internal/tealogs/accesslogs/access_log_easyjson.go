// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package accesslogs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs(in *jlexer.Lexer, out *AccessLogGeoLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "timeZone":
			out.TimeZone = string(in.String())
		case "accuracyRadius":
			out.AccuracyRadius = uint16(in.Uint16())
		case "metroCode":
			out.MetroCode = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs(out *jwriter.Writer, in AccessLogGeoLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"timeZone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"accuracyRadius\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.AccuracyRadius))
	}
	{
		const prefix string = ",\"metroCode\":"
		out.RawString(prefix)
		out.Uint(uint(in.MetroCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogGeoLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogGeoLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogGeoLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogGeoLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs1(in *jlexer.Lexer, out *AccessLogGeo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "region":
			out.Region = string(in.String())
		case "state":
			out.State = string(in.String())
		case "city":
			out.City = string(in.String())
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs1(out *jwriter.Writer, in AccessLogGeo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix[1:])
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogGeo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogGeo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogGeo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogGeo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs1(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs2(in *jlexer.Lexer, out *AccessLogFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimeType":
			out.MimeType = string(in.String())
		case "extension":
			out.Extension = string(in.String())
		case "charset":
			out.Charset = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs2(out *jwriter.Writer, in AccessLogFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimeType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MimeType))
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		out.String(string(in.Extension))
	}
	{
		const prefix string = ",\"charset\":"
		out.RawString(prefix)
		out.String(string(in.Charset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs2(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs3(in *jlexer.Lexer, out *AccessLogExtend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			(out.File).UnmarshalEasyJSON(in)
		case "client":
			(out.Client).UnmarshalEasyJSON(in)
		case "geo":
			(out.Geo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs3(out *jwriter.Writer, in AccessLogExtend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		(in.File).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"client\":"
		out.RawString(prefix)
		(in.Client).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		(in.Geo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogExtend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogExtend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogExtend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogExtend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs3(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs4(in *jlexer.Lexer, out *AccessLogClientOS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "family":
			out.Family = string(in.String())
		case "major":
			out.Major = string(in.String())
		case "minor":
			out.Minor = string(in.String())
		case "patch":
			out.Patch = string(in.String())
		case "patchMinor":
			out.PatchMinor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs4(out *jwriter.Writer, in AccessLogClientOS) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix[1:])
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"major\":"
		out.RawString(prefix)
		out.String(string(in.Major))
	}
	{
		const prefix string = ",\"minor\":"
		out.RawString(prefix)
		out.String(string(in.Minor))
	}
	{
		const prefix string = ",\"patch\":"
		out.RawString(prefix)
		out.String(string(in.Patch))
	}
	{
		const prefix string = ",\"patchMinor\":"
		out.RawString(prefix)
		out.String(string(in.PatchMinor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogClientOS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogClientOS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogClientOS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogClientOS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs4(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs5(in *jlexer.Lexer, out *AccessLogClientDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "family":
			out.Family = string(in.String())
		case "brand":
			out.Brand = string(in.String())
		case "model":
			out.Model = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs5(out *jwriter.Writer, in AccessLogClientDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix[1:])
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		out.String(string(in.Brand))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogClientDevice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogClientDevice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogClientDevice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogClientDevice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs5(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs6(in *jlexer.Lexer, out *AccessLogClientBrowser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "family":
			out.Family = string(in.String())
		case "major":
			out.Major = string(in.String())
		case "minor":
			out.Minor = string(in.String())
		case "patch":
			out.Patch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs6(out *jwriter.Writer, in AccessLogClientBrowser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix[1:])
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"major\":"
		out.RawString(prefix)
		out.String(string(in.Major))
	}
	{
		const prefix string = ",\"minor\":"
		out.RawString(prefix)
		out.String(string(in.Minor))
	}
	{
		const prefix string = ",\"patch\":"
		out.RawString(prefix)
		out.String(string(in.Patch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogClientBrowser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogClientBrowser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogClientBrowser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogClientBrowser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs6(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs7(in *jlexer.Lexer, out *AccessLogClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "os":
			(out.OS).UnmarshalEasyJSON(in)
		case "device":
			(out.Device).UnmarshalEasyJSON(in)
		case "browser":
			(out.Browser).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs7(out *jwriter.Writer, in AccessLogClient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix[1:])
		(in.OS).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		(in.Device).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"browser\":"
		out.RawString(prefix)
		(in.Browser).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLogClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLogClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLogClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLogClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs7(l, v)
}
func easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs8(in *jlexer.Lexer, out *AccessLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "serverId":
			out.ServerId = string(in.String())
		case "backendId":
			out.BackendId = string(in.String())
		case "locationId":
			out.LocationId = string(in.String())
		case "fastcgiId":
			out.FastcgiId = string(in.String())
		case "rewriteId":
			out.RewriteId = string(in.String())
		case "teaVersion":
			out.TeaVersion = string(in.String())
		case "remoteAddr":
			out.RemoteAddr = string(in.String())
		case "rawRemoteAddr":
			out.RawRemoteAddr = string(in.String())
		case "remotePort":
			out.RemotePort = int(in.Int())
		case "remoteUser":
			out.RemoteUser = string(in.String())
		case "requestURI":
			out.RequestURI = string(in.String())
		case "requestPath":
			out.RequestPath = string(in.String())
		case "apiPath":
			out.APIPath = string(in.String())
		case "apiStatus":
			out.APIStatus = string(in.String())
		case "requestLength":
			out.RequestLength = int64(in.Int64())
		case "requestTime":
			out.RequestTime = float64(in.Float64())
		case "requestMethod":
			out.RequestMethod = string(in.String())
		case "requestFilename":
			out.RequestFilename = string(in.String())
		case "scheme":
			out.Scheme = string(in.String())
		case "proto":
			out.Proto = string(in.String())
		case "bytesSent":
			out.BytesSent = int64(in.Int64())
		case "bodyBytesSent":
			out.BodyBytesSent = int64(in.Int64())
		case "status":
			out.Status = int(in.Int())
		case "statusMessage":
			out.StatusMessage = string(in.String())
		case "sentHeader":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SentHeader = make(map[string][]string)
				} else {
					out.SentHeader = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.SentHeader)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "timeISO8601":
			out.TimeISO8601 = string(in.String())
		case "timeLocal":
			out.TimeLocal = string(in.String())
		case "msec":
			out.Msec = float64(in.Float64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "host":
			out.Host = string(in.String())
		case "referer":
			out.Referer = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		case "request":
			out.Request = string(in.String())
		case "contentType":
			out.ContentType = string(in.String())
		case "cookie":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Cookie = make(map[string]string)
				} else {
					out.Cookie = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Cookie)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "arg":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Arg = make(map[string][]string)
				} else {
					out.Arg = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 []string
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]string, 0, 4)
							} else {
								v4 = []string{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 string
							v5 = string(in.String())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Arg)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "args":
			out.Args = string(in.String())
		case "queryString":
			out.QueryString = string(in.String())
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(map[string][]string)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 []string
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make([]string, 0, 4)
							} else {
								v6 = []string{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 string
							v7 = string(in.String())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "serverName":
			out.ServerName = string(in.String())
		case "serverPort":
			out.ServerPort = int(in.Int())
		case "serverProtocol":
			out.ServerProtocol = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "backendAddress":
			out.BackendAddress = string(in.String())
		case "backendCode":
			out.BackendCode = string(in.String())
		case "backendScheme":
			out.BackendScheme = string(in.String())
		case "fastcgiAddress":
			out.FastcgiAddress = string(in.String())
		case "requestData":
			if in.IsNull() {
				in.Skip()
				out.RequestData = nil
			} else {
				out.RequestData = in.Bytes()
			}
		case "responseHeaderData":
			if in.IsNull() {
				in.Skip()
				out.ResponseHeaderData = nil
			} else {
				out.ResponseHeaderData = in.Bytes()
			}
		case "responseBodyData":
			if in.IsNull() {
				in.Skip()
				out.ResponseBodyData = nil
			} else {
				out.ResponseBodyData = in.Bytes()
			}
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]string, 0, 4)
					} else {
						out.Errors = []string{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Errors = append(out.Errors, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hasErrors":
			out.HasErrors = bool(in.Bool())
		case "extend":
			if in.IsNull() {
				in.Skip()
				out.Extend = nil
			} else {
				if out.Extend == nil {
					out.Extend = new(AccessLogExtend)
				}
				(*out.Extend).UnmarshalEasyJSON(in)
			}
		case "attrs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attrs = make(map[string]string)
				} else {
					out.Attrs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.Attrs)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "storageOnly":
			out.StorageOnly = bool(in.Bool())
		case "storagePolicyIds":
			if in.IsNull() {
				in.Skip()
				out.StoragePolicyIds = nil
			} else {
				in.Delim('[')
				if out.StoragePolicyIds == nil {
					if !in.IsDelim(']') {
						out.StoragePolicyIds = make([]string, 0, 4)
					} else {
						out.StoragePolicyIds = []string{}
					}
				} else {
					out.StoragePolicyIds = (out.StoragePolicyIds)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.StoragePolicyIds = append(out.StoragePolicyIds, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs8(out *jwriter.Writer, in AccessLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"serverId\":"
		out.RawString(prefix)
		out.String(string(in.ServerId))
	}
	{
		const prefix string = ",\"backendId\":"
		out.RawString(prefix)
		out.String(string(in.BackendId))
	}
	{
		const prefix string = ",\"locationId\":"
		out.RawString(prefix)
		out.String(string(in.LocationId))
	}
	{
		const prefix string = ",\"fastcgiId\":"
		out.RawString(prefix)
		out.String(string(in.FastcgiId))
	}
	{
		const prefix string = ",\"rewriteId\":"
		out.RawString(prefix)
		out.String(string(in.RewriteId))
	}
	{
		const prefix string = ",\"teaVersion\":"
		out.RawString(prefix)
		out.String(string(in.TeaVersion))
	}
	{
		const prefix string = ",\"remoteAddr\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddr))
	}
	{
		const prefix string = ",\"rawRemoteAddr\":"
		out.RawString(prefix)
		out.String(string(in.RawRemoteAddr))
	}
	{
		const prefix string = ",\"remotePort\":"
		out.RawString(prefix)
		out.Int(int(in.RemotePort))
	}
	{
		const prefix string = ",\"remoteUser\":"
		out.RawString(prefix)
		out.String(string(in.RemoteUser))
	}
	{
		const prefix string = ",\"requestURI\":"
		out.RawString(prefix)
		out.String(string(in.RequestURI))
	}
	{
		const prefix string = ",\"requestPath\":"
		out.RawString(prefix)
		out.String(string(in.RequestPath))
	}
	{
		const prefix string = ",\"apiPath\":"
		out.RawString(prefix)
		out.String(string(in.APIPath))
	}
	{
		const prefix string = ",\"apiStatus\":"
		out.RawString(prefix)
		out.String(string(in.APIStatus))
	}
	{
		const prefix string = ",\"requestLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.RequestLength))
	}
	{
		const prefix string = ",\"requestTime\":"
		out.RawString(prefix)
		out.Float64(float64(in.RequestTime))
	}
	{
		const prefix string = ",\"requestMethod\":"
		out.RawString(prefix)
		out.String(string(in.RequestMethod))
	}
	{
		const prefix string = ",\"requestFilename\":"
		out.RawString(prefix)
		out.String(string(in.RequestFilename))
	}
	{
		const prefix string = ",\"scheme\":"
		out.RawString(prefix)
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"proto\":"
		out.RawString(prefix)
		out.String(string(in.Proto))
	}
	{
		const prefix string = ",\"bytesSent\":"
		out.RawString(prefix)
		out.Int64(int64(in.BytesSent))
	}
	{
		const prefix string = ",\"bodyBytesSent\":"
		out.RawString(prefix)
		out.Int64(int64(in.BodyBytesSent))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"statusMessage\":"
		out.RawString(prefix)
		out.String(string(in.StatusMessage))
	}
	{
		const prefix string = ",\"sentHeader\":"
		out.RawString(prefix)
		if in.SentHeader == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.SentHeader {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v15, v16 := range v14Value {
						if v15 > 0 {
							out.RawByte(',')
						}
						out.String(string(v16))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"timeISO8601\":"
		out.RawString(prefix)
		out.String(string(in.TimeISO8601))
	}
	{
		const prefix string = ",\"timeLocal\":"
		out.RawString(prefix)
		out.String(string(in.TimeLocal))
	}
	{
		const prefix string = ",\"msec\":"
		out.RawString(prefix)
		out.Float64(float64(in.Msec))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"referer\":"
		out.RawString(prefix)
		out.String(string(in.Referer))
	}
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"cookie\":"
		out.RawString(prefix)
		if in.Cookie == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Cookie {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"arg\":"
		out.RawString(prefix)
		if in.Arg == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Arg {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if v18Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v19, v20 := range v18Value {
						if v19 > 0 {
							out.RawByte(',')
						}
						out.String(string(v20))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"queryString\":"
		out.RawString(prefix)
		out.String(string(in.QueryString))
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Header {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				if v21Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v22, v23 := range v21Value {
						if v22 > 0 {
							out.RawByte(',')
						}
						out.String(string(v23))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"serverName\":"
		out.RawString(prefix)
		out.String(string(in.ServerName))
	}
	{
		const prefix string = ",\"serverPort\":"
		out.RawString(prefix)
		out.Int(int(in.ServerPort))
	}
	{
		const prefix string = ",\"serverProtocol\":"
		out.RawString(prefix)
		out.String(string(in.ServerProtocol))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"backendAddress\":"
		out.RawString(prefix)
		out.String(string(in.BackendAddress))
	}
	{
		const prefix string = ",\"backendCode\":"
		out.RawString(prefix)
		out.String(string(in.BackendCode))
	}
	{
		const prefix string = ",\"backendScheme\":"
		out.RawString(prefix)
		out.String(string(in.BackendScheme))
	}
	{
		const prefix string = ",\"fastcgiAddress\":"
		out.RawString(prefix)
		out.String(string(in.FastcgiAddress))
	}
	{
		const prefix string = ",\"requestData\":"
		out.RawString(prefix)
		out.Base64Bytes(in.RequestData)
	}
	{
		const prefix string = ",\"responseHeaderData\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ResponseHeaderData)
	}
	{
		const prefix string = ",\"responseBodyData\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ResponseBodyData)
	}
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Errors {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hasErrors\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasErrors))
	}
	{
		const prefix string = ",\"extend\":"
		out.RawString(prefix)
		if in.Extend == nil {
			out.RawString("null")
		} else {
			(*in.Extend).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"attrs\":"
		out.RawString(prefix)
		if in.Attrs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Attrs {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.String(string(v32Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"storageOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.StorageOnly))
	}
	{
		const prefix string = ",\"storagePolicyIds\":"
		out.RawString(prefix)
		if in.StoragePolicyIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.StoragePolicyIds {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF44c504dEncodeGithubComTeaWebCodeTealogsAccesslogs8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF44c504dDecodeGithubComTeaWebCodeTealogsAccesslogs8(l, v)
}
